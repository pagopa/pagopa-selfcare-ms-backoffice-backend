# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: 'ubuntu-22.04'

parameters:
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prod
  - name: SEMVER
    displayName: "When packing a release, define the version bump to apply. Use only buildNumber or skip for manual deployment"
    type: string
    values:
      - major
      - minor
      - patch
      - buildNumber
      - skip
    default: skip
  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: TEST
    displayName: Run tests
    type: boolean
    default: false

variables:
  imageRepository: '$(IMAGE_REPOSITORY_NAME)'
  nameSpace: '$(K8S_NAMESPACE)'

  ${{ if eq(parameters['ENV'], 'dev') }}:
    dockerRegistryServiceConnection: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(DEV_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
    poolImage: 'pagopa-dev-linux'
    appInsightsServiceConn: "$(TF_APPINSIGHTS_SERVICE_CONN_DEV)"
    appInsightsResourceId: "$(TF_APPINSIGHTS_RESOURCE_ID_DEV)"
  ${{ if eq(parameters['ENV'], 'uat') }}:
    dockerRegistryServiceConnection: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(UAT_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(UAT_KUBERNETES_SERVICE_CONN)'
    poolImage: 'pagopa-uat-linux'
    # appInsightsServiceConn: "$(TF_APPINSIGHTS_SERVICE_CONN_UAT)"
    # appInsightsResourceId: "$(TF_APPINSIGHTS_RESOURCE_ID_UAT)"
  ${{ if eq(parameters['ENV'], 'prod') }}:
    dockerRegistryServiceConnection: $(PROD_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(PROD_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(PROD_KUBERNETES_SERVICE_CONN)'
    poolImage: 'pagopa-prod-linux'
    appInsightsServiceConn: "$(TF_APPINSIGHTS_SERVICE_CONN_PROD)"
    appInsightsResourceId: "$(TF_APPINSIGHTS_RESOURCE_ID_PROD)"

  ${{ if eq(variables['Build.SourceBranchName'], 'merge') }}:
    sourceBranch: "main" # force to main branch
  ${{ if ne(variables['Build.SourceBranchName'], 'merge') }}:
    sourceBranch: ${{ variables['Build.SourceBranchName'] }}



resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.10.3
      endpoint: 'io-azure-devops-github-ro'

stages:

  # Create a release on GitHub
  - stage: Release
    condition: ne('${{ parameters.SEMVER }}', 'skip')
    jobs:
      - job: make_release
        steps:
          - checkout: self
            clean: true
            persistCredentials: true

          - template: templates/maven-github-release/template.yaml@pagopaCommons
            parameters:
              release_branch: $(sourceBranch)
              gitEmail: $(GIT_EMAIL)
              gitUsername: $(GIT_USERNAME)
              gitHubConnection: $(GITHUB_CONNECTION)
              ${{ if ne(parameters.SEMVER, 'skip') }}:
                semver: '${{ parameters.SEMVER }}'

          - template: templates/maven-github-current-version/template.yaml@pagopaCommons

  # Build and Push Docker Image
  - stage: Build
    dependsOn: Release
    variables:
      next_version: $[ stageDependencies.Release.make_release.outputs['next_version.value'] ]
      current_version: $[ stageDependencies.Release.make_release.outputs['current_version.value'] ]
      current_version_branch: $[ stageDependencies.Release.branch_version.outputs['current_version.value'] ]
      current_version_tag: $[ stageDependencies.Release.tag_version.outputs['current_version.value'] ]
    jobs:
      - job: "build"
        steps:
          - template: templates/deploy-release-decision/template.yaml@pagopaCommons
            parameters:
              NEXT_VERSION: $(current_version)
              CURRENT_VERSION: $(current_version)
              CURRENT_VERSION_BRANCH: $(current_version_branch)
              CURRENT_VERSION_TAG: $(current_version_tag)
              BUILD_SOURCE_VERSION: $(Build.SourceVersion)
              BUILD_SOURCE_BRANCH_NAME: $(Build.SourceBranchName)
          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(dockerRegistryServiceConnection)
              CONTAINER_REGISTRY_FQDN: $(dockerRegistryFqdn)
              DOCKER_IMAGE_NAME: $(imageRepository)
              DOCKER_IMAGE_TAG: $(deploy_version_decision.value)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}


  # Deploy on K8s with Helm
  - stage: "Deploy"
    dependsOn: "Build"
    variables:
      deploy_version: $[ stageDependencies.Build.build.outputs['deploy_version_decision.value'] ]
    jobs:
      - deployment: "deploy"
        pool:
          name: $(poolImage)
        environment: ${{ parameters['ENV'] }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"

                - template: templates/helm-microservice-chart-setup/template.yaml@pagopaCommons
                  parameters:
                    DEPLOY_VERSION: $(deploy_version)

                - template: templates/helm-microservice-chart-deploy/template.yaml@pagopaCommons
                  parameters:
                    DO_DEPLOY: true
                    ENV: ${{ parameters['ENV'] }}
                    KUBERNETES_SERVICE_CONN: ${{ variables.kubernetesServiceConnection }}
                    NAMESPACE: "selfcare" #"$(nameSpace)
                    APP_NAME: $(imageRepository)
                    VALUE_FILE: "helm/values-${{ parameters['ENV'] }}.yaml"
                    DEPLOY_VERSION: $(deploy_version)
                    APPINSIGHTS_SERVICE_CONN: ${{ variables.appInsightsServiceConn }}
                    APPINSIGHTS_RESOURCE_ID: ${{ variables.appInsightsResourceId }}
